if(removalText == T){
cat(paste(remCells, " / ", totalCells, " cells were removed due to low gene expression (cluster ID of removed clusters: ", remClust, ")", sep=""))
}
}
## patients
if("patients" %in% fisherTests){
patientss <- unique(ctClust$patients)
patientss <- patientss[match(c("Healthy","RAD1","RAD2","RAD3","RAD4","RAD5","RAD6","TEY3","TEY4","TEY6",
"TEY8","TEY14","TNET1","TNET2","TNET3","TNET4"),
patientss, nomatch=F)]
patientsTable <- matrix(nrow=length(clusterVals), ncol=length(patientss))
for(i in 1:length(clusterVals)){
for(j in 1:length(patientss)){
patientsTable[i, j] <- nrow(subset(ctClust, patients==patientss[j] &
kmeans.cluster==clusterVals[i]))
}
}
colnames(patientsTable) <- paste("patients_", patientss, sep="")
rownames(patientsTable) <- paste("cluster_", clusterVals, sep="")
print("     ", quote=F)
print("     ", quote=F)
print("Patient vs. Cluster", quote=F)
# print(patientsTable)
print(patientsTable, quote = F)
# print(fisher.test(factor(ctClust$patients), factor(ctClust$kmeans.cluster), workspace = 1000000000))
print(chisq.test(patientsTable, simulate.p.value=T))
## Bar Plots
patientsTablePlots <- tableBarPlots(plotFactor = "patients", plotFactorVals = patientss, clusterVals = clusterVals, factorTable = patientsTable, colorKey = patientsColorKey)
}
## patient cohorts
if("cohort" %in% fisherTests){
cohorts <- unique(ctClust$cohort)
cohorts <- cohorts[match(c("Child","Adult","Risk","Healthy"), cohorts, nomatch=F)]
cohortTable <- matrix(nrow=length(clusterVals), ncol=length(cohorts))
for(i in 1:length(clusterVals)){
for(j in 1:length(cohorts)){
cohortTable[i, j] <- nrow(subset(ctClust, cohort==cohorts[j] &
kmeans.cluster==clusterVals[i]))
}
}
colnames(cohortTable) <- paste("cohort_", cohorts, sep="")
rownames(cohortTable) <- paste("cluster_", clusterVals, sep="")
print("     ", quote=F)
print("     ", quote=F)
print("Cohort vs. Cluster", quote=F)
print(cohortTable)
# print(fisher.test(factor(ctClust$cohort), factor(ctClust$kmeans.cluster), workspace = 1000000000))
print(chisq.test(cohortTable, simulate.p.value=T))
## Bar Plots
cohortTablePlots <- tableBarPlots(plotFactor = "cohort", plotFactorVals = cohorts, clusterVals = clusterVals, factorTable = cohortTable, colorKey = cohortColorKey)
print(cohortTablePlots[[3]])
}
print(cohortTablePlots[[4]])
## marker Types
if("markerType" %in% fisherTests){
markerTypes <- unique(ctClust$markerType)
markerTypes <- markerTypes[match(c("Surface", "Tetramer", "Bulk_CD4+"), markerTypes, nomatch=F)]
markerTypeTable <- matrix(nrow=length(clusterVals), ncol=length(markerTypes))
for(i in 1:length(clusterVals)){
for(j in 1:length(markerTypes)){
markerTypeTable[i, j] <- nrow(subset(ctClust, markerType==markerTypes[j] &
kmeans.cluster==clusterVals[i]))
}
}
colnames(markerTypeTable) <- paste("markerType_", markerTypes, sep="")
rownames(markerTypeTable) <- paste("cluster_", clusterVals, sep="")
print("     ", quote=F)
print("     ", quote=F)
print("markerType vs. Cluster", quote=F)
print(markerTypeTable)
# print(fisher.test(factor(ctClust$markerType), factor(ctClust$kmeans.cluster), workspace = 1000000000))
print(chisq.test(markerTypeTable, simulate.p.value=T))
## Bar Plots
markerTypeTablePlots <- tableBarPlots(plotFactor = "markerType", plotFactorVals = markerTypes, clusterVals = clusterVals, factorTable = markerTypeTable, colorKey = markerTypeColorKey)
print(markerTypeTablePlots[[1]])
}
print(markerTypeTablePlots[[2]])
print(markerTypeTablePlots[[3]])
print(markerTypeTablePlots[[4]])
## markers
if("marker" %in% fisherTests){
markers <- unique(ctClust$marker)
markers <- markers[order(as.numeric(markers))]
markerTable <- matrix(nrow=length(clusterVals), ncol=length(markers))
for(i in 1:length(clusterVals)){
for(j in 1:length(markers)){
markerTable[i, j] <- nrow(subset(ctClust, marker==markers[j] &
kmeans.cluster==clusterVals[i]))
}
}
colnames(markerTable) <- paste("marker_", markers, sep="")
rownames(markerTable) <- paste("cluster_", clusterVals, sep="")
print("     ", quote=F)
print("     ", quote=F)
print("Marker vs. Cluster", quote=F)
print(markerTable)
# print(fisher.test(factor(ctClust$marker), factor(ctClust$kmeans.cluster), workspace = 1000000000))
print(chisq.test(markerTable, simulate.p.value=T))
## Bar Plots
markerTablePlots <- tableBarPlots(plotFactor = "marker", plotFactorVals = markers, clusterVals = clusterVals, factorTable = markerTable, colorKey = markerColorKey)
print(markerTablePlots[[1]])
}
## patient cohorts
if("cohort" %in% fisherTests){
cohorts <- unique(ctClust$cohort)
cohorts <- cohorts[match(c("12-20", "13-21", "CP11","CP13", "CP18", "Alt_1-9",
"CXCR3+/PD1-", "ICOS+/PD1-", "PD1-/CXCR3-", "PD1-/ICOS-",
"PD1+/CXCR3+", "PD1+/ICOS-", "PD1+/ICOS+", "Bulk_CD4+"),
cohorts, nomatch=F)]
cohortTable <- matrix(nrow=length(clusterVals), ncol=length(cohorts))
for(i in 1:length(clusterVals)){
for(j in 1:length(cohorts)){
cohortTable[i, j] <- nrow(subset(ctClust, cohort==cohorts[j] &
kmeans.cluster==clusterVals[i]))
}
}
colnames(cohortTable) <- paste("cohort_", cohorts, sep="")
rownames(cohortTable) <- paste("cluster_", clusterVals, sep="")
print("     ", quote=F)
print("     ", quote=F)
print("Cohort vs. Cluster", quote=F)
print(cohortTable)
# print(fisher.test(factor(ctClust$cohort), factor(ctClust$kmeans.cluster), workspace = 1000000000))
print(chisq.test(cohortTable, simulate.p.value=T))
## Bar Plots
cohortTablePlots <- tableBarPlots(plotFactor = "cohort", plotFactorVals = cohorts, clusterVals = clusterVals, factorTable = cohortTable, colorKey = cohortColorKey)
# print(cohortTablePlots[[4]])
}
## all markers
if("marker" %in% fisherTests){
markers <- unique(ctClust$marker)
markers <- markers[match(c("12-20", "13-21", "CP11","CP13", "CP18", "Alt_1-9",
"CXCR3+/PD1-", "ICOS+/PD1-", "PD1-/CXCR3-",
"PD1-/ICOS-", "PD1+/CXCR3+", "PD1+/ICOS-",
"PD1+/ICOS+", "Bulk_CD4+"),
markers, nomatch=F)]
markerTable <- matrix(nrow=length(clusterVals), ncol=length(markers))
for(i in 1:length(clusterVals)){
for(j in 1:length(markers)){
markerTable[i, j] <- nrow(subset(ctClust, marker==markers[j] &
kmeans.cluster==clusterVals[i]))
}
}
colnames(markerTable) <- paste("marker_", markers, sep="")
rownames(markerTable) <- paste("cluster_", clusterVals, sep="")
print("     ", quote=F)
print("     ", quote=F)
print("marker vs. Cluster", quote=F)
print(markerTable)
# print(fisher.test(factor(ctClust$marker), factor(ctClust$kmeans.cluster), workspace = 1000000000))
print(chisq.test(markerTable, simulate.p.value=T))
## Bar Plots
markerTablePlots <- tableBarPlots(plotFactor = "marker", plotFactorVals = markers, clusterVals = clusterVals, factorTable = markerTable, colorKey = markerColorKey)
print(markerTablePlots[[4]])
}
View(ctNorm)
## cluster and filter
ctClust <- clusterFilter(ctNorm, testK = T, numCenters = 3, plotHeatmap=T, plotClustOnly=F,
heatmapFactor = "kmeans.cluster", heatmapColorBy = c("marker", "cohort", "markerType"),
heatmapcohortLabel = "T1D Samples",
fisherTests = c("markerType", "cohort", "marker"),
# fisherTests = NULL,
cumulativeExpHist = T, filterClusters = T, clustersToRemove = NULL)
library(plyr)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(gplots)
library(gtools)
library(stats)
library(lattice)
library(latticeExtra)
library(grid)
library(gridExtra)
library(wesanderson)
library(Rtsne)
## set baseDir if Knitting with RStudio button
baseDir <- "~/Desktop/Su Lab/single_cell_T1D/"
## sets path if run from runAnalysis.R
#currentFile <- rstudioapi::getActiveDocumentContext()$path
#baseDir <- gsub("single_cell_T1D/.*", "single_cell_T1D/", currentFile)
#### source function scripts ####
funcDir <- paste(baseDir, "src/functions/", sep="")
funcFiles <- c("formatRaw.R",
"dataLoadT1D.R",
"cleanCt.R",
"geneSetEnrichment.R",
"violinPlot.R",
"heatmap2_custom.R",
"heatmap.3.R",
"clusterFilter.R",
"tableBarPlots.R",
"clusterReport.R",
"reportViolins.R",
"reportTSNE.R",
"plotTSNE.R")
funcFiles <- paste(funcDir, funcFiles, sep="")
for(file in funcFiles){
source(file)
}
## load data
ctTable <- dataLoadT1D()
## calculate log2Ex, reformat ctTable, and normalize values
ctNorm <- cleanCt(ctTable, summaryOutput=T, cumExpCutoff = F, normGene = "none")
## cluster and filter
ctClust <- clusterFilter(ctNorm, testK = T, numCenters = 3, plotHeatmap=T, plotClustOnly=F,
heatmapFactor = "kmeans.cluster", heatmapColorBy = c("marker", "cohort", "markerType"),
heatmapcohortLabel = "T1D Samples",
fisherTests = c("markerType", "cohort", "marker"),
# fisherTests = NULL,
cumulativeExpHist = T, filterClusters = T, clustersToRemove = NULL)
ctRep <- ctClust
View(ctRep)
## remove duplicated rows
if(anyDuplicated(ctRep[,10:ncol(ctRep)]) > 0){
ctRep <- ctRep[-which(duplicated(ctRep[,10:ncol(ctRep)])),]
}
## remove genes without variance
vars <- NULL
for(i in 10:ncol(ctRep)){
vars <- c(vars, var(ctRep[,i], na.rm=T))
}
ctGenesNoVar <- ctRep[which(vars == 0 | is.na(vars))+9]
ctRep <- ctRep[,c(1:9, (which(!is.na(vars) & vars!=0)+9))]
## run t-SNE
set.seed(1)
tsne_out <- Rtsne(as.matrix(ctRep[, 10:ncol(ctRep)]), perplexity = 30)
tsne_y <- as.data.frame(cbind(tsne_out$Y,
ctRep$cohort,
ctRep$kmeans.cluster,
ctRep$marker,
ctRep$patients,
ctRep$markerType,
ctRep[, 10:ncol(ctRep)]))
View(tsne_y)
names(tsne_y)[1:7] <- c("y1", "y2", "cohort", "kmeans.cluster", "marker", "patient", "markerType")
View(tsne_y)
View(ctRep)
View(ctClust)
View(tsne_y)
ctRep <- ctClust
## remove duplicated rows
if(anyDuplicated(ctRep[,10:ncol(ctRep)]) > 0){
ctRep <- ctRep[-which(duplicated(ctRep[,10:ncol(ctRep)])),]
}
## remove genes without variance
vars <- NULL
for(i in 10:ncol(ctRep)){
vars <- c(vars, var(ctRep[,i], na.rm=T))
}
ctGenesNoVar <- ctRep[which(vars == 0 | is.na(vars))+9]
ctRep <- ctRep[,c(1:9, (which(!is.na(vars) & vars!=0)+9))]
tsne_y <- as.data.frame(cbind(tsne_out$Y,
ctRep$cohort,
ctRep$kmeans.cluster,
ctRep$marker,
ctRep$patients,
ctRep$markerType,
ctRep[, 10:ncol(ctRep)]))
names(tsne_y)[1:7] <- c("y1", "y2", "cohort", "kmeans.cluster", "marker", "patient", "markerType")
for(i in c(1,2,8:ncol(tsne_y))){
tsne_y[, i] <- as.numeric(tsne_y[, i])
}
## set color for t-SNE plot
pointSize <- 4
myPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
clusterPalette <- "Set3"
shapeVals <- c(19, 17, 15, 18)
numcohorts <- length(unique(tsne_y$cohort))
shapeVals <- shapeVals[1:numcohorts]
## label cells by kmeans.cluster
if("kmeans.cluster" %in% colorby){
plTSNE <- ggplot(tsne_y, aes(y1, y2)) +
geom_point(aes(color=factor(tsne_y$kmeans.cluster)), size = pointSize, alpha = 1) +
scale_colour_brewer(palette = clusterPalette) +
scale_x_continuous(breaks=seq(min(tsne_y$y1), max(tsne_y$y1), length.out = 10),
minor_breaks = NULL) +
scale_y_continuous(breaks=seq(min(tsne_y$y2), max(tsne_y$y2), length.out = 10),
minor_breaks = NULL) +
scale_shape_manual(values = shapeVals) +
guides(color=guide_legend(title="cluster", order = 1)) +
ggtitle("t-SNE colored by kmeans.cluster") +
theme_minimal() +
theme(#axis.line=element_blank(),
panel.border=element_rect(fill=NA, color="gray75", size=0.4),
panel.grid.minor=element_line(color="gray90"),
panel.grid.major=element_line(color="gray85", size=0.3),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
text=element_text(size=28),
plot.margin=unit(c(14,9,14,9),"cm"))
print(plTSNE)
}
colorby = c("kmeans.cluster", "cohort", "marker", "markerType")
## label cells by kmeans.cluster
if("kmeans.cluster" %in% colorby){
plTSNE <- ggplot(tsne_y, aes(y1, y2)) +
geom_point(aes(color=factor(tsne_y$kmeans.cluster)), size = pointSize, alpha = 1) +
scale_colour_brewer(palette = clusterPalette) +
scale_x_continuous(breaks=seq(min(tsne_y$y1), max(tsne_y$y1), length.out = 10),
minor_breaks = NULL) +
scale_y_continuous(breaks=seq(min(tsne_y$y2), max(tsne_y$y2), length.out = 10),
minor_breaks = NULL) +
scale_shape_manual(values = shapeVals) +
guides(color=guide_legend(title="cluster", order = 1)) +
ggtitle("t-SNE colored by kmeans.cluster") +
theme_minimal() +
theme(#axis.line=element_blank(),
panel.border=element_rect(fill=NA, color="gray75", size=0.4),
panel.grid.minor=element_line(color="gray90"),
panel.grid.major=element_line(color="gray85", size=0.3),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
text=element_text(size=28),
plot.margin=unit(c(14,9,14,9),"cm"))
print(plTSNE)
}
## label cells by cohort
if("cohort" %in% colorby){
plTSNE <- ggplot(tsne_y, aes(y1, y2)) +
geom_point(aes(color=factor(tsne_y$cohort)), size = pointSize, alpha = 1) +
scale_colour_manual(values=c("#21908CFF","#FDE725FF","gray48","#440154FF")) +
scale_x_continuous(breaks=seq(min(tsne_y$y1), max(tsne_y$y1), length.out = 10),
minor_breaks = NULL) +
scale_y_continuous(breaks=seq(min(tsne_y$y2), max(tsne_y$y2), length.out = 10),
minor_breaks = NULL) +
scale_shape_manual(values = shapeVals) +
guides(color=guide_legend(title="cohort", order = 1)) +
ggtitle("t-SNE colored by patient cohorts") +
theme_minimal() +
theme(#axis.line=element_blank(),
panel.border=element_rect(fill=NA, color="gray75", size=0.4),
panel.grid.minor=element_line(color="gray90"),
panel.grid.major=element_line(color="gray85", size=0.3),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
text=element_text(size=28),
plot.margin=unit(c(14,9,14,9),"cm"))
print(plTSNE)
}
## label cells by type of markers
if("markerType" %in% colorby){
plTSNE <- ggplot(tsne_y, aes(y1, y2)) +
geom_point(aes(color=factor(tsne_y$markerType)), size = pointSize, alpha = 1) +
scale_colour_manual(values=wes_palette("Moonrise3", 3)) +
scale_x_continuous(breaks=seq(min(tsne_y$y1), max(tsne_y$y1), length.out = 10),
minor_breaks = NULL) +
scale_y_continuous(breaks=seq(min(tsne_y$y2), max(tsne_y$y2), length.out = 10),
minor_breaks = NULL) +
scale_shape_manual(values = shapeVals) +
guides(color=guide_legend(title="markers", order = 1)) +
ggtitle("t-SNE colored by different types of markers") +
theme_minimal() +
theme(#axis.line=element_blank(),
panel.border=element_rect(fill=NA, color="gray75", size=0.4),
panel.grid.minor=element_line(color="gray90"),
panel.grid.major=element_line(color="gray85", size=0.3),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
text=element_text(size=28),
plot.margin=unit(c(14,9,14,9),"cm"))
print(plTSNE)
}
## label cells by marker
if("marker" %in% colorby){
plTSNE <- ggplot(tsne_y, aes(y1, y2)) +
geom_point(aes(color=factor(tsne_y$marker)), size = pointSize, alpha = 1) +
scale_colour_manual(values=c("#9A8822","#F5CDB4","#F8AFA8","#FDDDA0","#74A089","#FF0000","#556A5B","#50A45C",
"#F2AD00","#F69100","#C49647","#5BBCD6", "royalblue3","moccasin")) +
scale_x_continuous(breaks=seq(min(tsne_y$y1), max(tsne_y$y1), length.out = 10),
minor_breaks = NULL) +
scale_y_continuous(breaks=seq(min(tsne_y$y2), max(tsne_y$y2), length.out = 10),
minor_breaks = NULL) +
scale_shape_manual(values = shapeVals) +
guides(color=guide_legend(title="markers", order = 1)) +
ggtitle("t-SNE colored by different markers") +
theme_minimal() +
theme(#axis.line=element_blank(),
panel.border=element_rect(fill=NA, color="gray75", size=0.4),
panel.grid.minor=element_line(color="gray90"),
panel.grid.major=element_line(color="gray85", size=0.3),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
text=element_text(size=28),
plot.margin=unit(c(14,9,14,9),"cm"))
print(plTSNE)
}
violinPlot(ctGenes=ctClust,
byFactor="kmeans.cluster",
factorOrder=c(1:3),
groupLabel="clusters",
extraLabel="for human samples",
dotSize = 1.5,
dotAlpha = 0.3)
### Check if all new columns have value assignmed
sum(is.na(ctTableCombine$marker))
na_ctTable<-subset(ctTableCombine,is.na(ctTableCombine$marker))
View(na_ctTable)
sum(na_ctTable$cohort != "control")
na_ctTable<-subset(na_ctTable,na_ctTable$cohort != "control")
View(na_ctTable)
#### violins ####
## Differentially expressed genes between cluster
violinPlot(ctGenes=ctClust,
byFactor="kmeans.cluster",
factorOrder=c(1:3),
groupLabel="clusters",
extraLabel="for human samples",
dotSize = 1.5,
dotAlpha = 0.3)
##  Differentially expressed genes between patients
# violinPlot(ctGenes=ctClust,
#            byFactor="probe",
#            factorOrder=c("RAD1","RAD2","RAD3","RAD4","RAD5","RAD6","TEY3","TEY6","TEY8","TEY14",
#                          "TNET1","TNET2","TNET3","TNET4","Healthy"),
#            groupLabel="patients",
#            extraLabel="for human samples",
#            dotSize = 1.5,
#            dotAlpha = 0.3)
# ##  Differentially expressed genes between cohorts
# violinPlot(ctGenes=ctClust,
#            byFactor="cohort",
#            factorOrder=c("Child","Adult","Risk","Healthy"),
#            groupLabel="Cohorts",
#            extraLabel="for human samples",
#            dotSize = 1.5,
#            dotAlpha = 0.3)
# ##  Differentially expressed genes between markers
# violinPlot(ctGenes=ctClust,
#            byFactor="markers",
#            factorOrder=c("PD1-/ICOS-", "PD1+/ICOS+", "PD1+/ICOS-", "ICOS+/PD1-", "PD1-/CXCR3-",
#                          "PD1+/CXCR3+", "CXCR3+/PD1-","12-20", "13-21", "CP11", "CP13", "CP18",
#                          "Bulk_CD4+", "Alt_1-9"),
#            groupLabel="Markers",
#            extraLabel="for human samples",
#            dotSize = 1.5,
#            dotAlpha = 0.3)
#
# ##  Differentially expressed genes between types of markers
# violinPlot(ctGenes=ctClust,
#            byFactor="markerType",
#            factorOrder=c("Tetramer", "Surface", "Bulk_CD4+"),
#            groupLabel="Types of Markers",
#            extraLabel="for human samples",
#            dotSize = 1.5,
#            dotAlpha = 0.3)
#### bottom ####
##  Differentially expressed genes between cohorts
violinPlot(ctGenes=ctClust,
byFactor="cohort",
factorOrder=c("Child","Adult","Risk","Healthy"),
groupLabel="Cohorts",
extraLabel="for human samples",
dotSize = 1.5,
dotAlpha = 0.3)
#            byFactor="markers",
#            factorOrder=c("PD1-/ICOS-", "PD1+/ICOS+", "PD1+/ICOS-", "ICOS+/PD1-", "PD1-/CXCR3-",
#                          "PD1+/CXCR3+", "CXCR3+/PD1-","12-20", "13-21", "CP11", "CP13", "CP18",
#                          "Bulk_CD4+", "Alt_1-9"),
#            groupLabel="Markers",
#            extraLabel="for human samples",
#            dotSize = 1.5,
#            dotAlpha = 0.3)
#
##  Differentially expressed genes between types of markers
violinPlot(ctGenes=ctClust,
byFactor="markerType",
factorOrder=c("Tetramer", "Surface", "Bulk_CD4+"),
groupLabel="Types of Markers",
extraLabel="for human samples",
dotSize = 1.5,
dotAlpha = 0.3)
##  Differentially expressed genes between markers
violinPlot(ctGenes=ctClust,
byFactor="markers",
factorOrder=c("PD1-/ICOS-", "PD1+/ICOS+", "PD1+/ICOS-", "ICOS+/PD1-", "PD1-/CXCR3-",
"PD1+/CXCR3+", "CXCR3+/PD1-","12-20", "13-21", "CP11", "CP13", "CP18",
"Bulk_CD4+", "Alt_1-9"),
groupLabel="Markers",
extraLabel="for human samples",
dotSize = 1.5,
dotAlpha = 0.3)
violinPlot(ctGenes=ctClust,
byFactor="marker",
factorOrder=c("PD1-/ICOS-", "PD1+/ICOS+", "PD1+/ICOS-", "ICOS+/PD1-", "PD1-/CXCR3-",
"PD1+/CXCR3+", "CXCR3+/PD1-","12-20", "13-21", "CP11", "CP13", "CP18",
"Bulk_CD4+", "Alt_1-9"),
groupLabel="Markers",
extraLabel="for human samples",
dotSize = 1.5,
dotAlpha = 0.3)
View(na_ctTable)
